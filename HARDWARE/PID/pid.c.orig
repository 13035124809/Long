#include "pid.h"
#include "usart.h"
#include "sys.h"
#include "math.h"
float PID_realize(float speed){
int index;
pid.SetSpeed=speed;
pid.err=pid.SetSpeed-pid.ActualSpeed;

if(pid.ActualSpeed>pid.umax) //灰色底色表示抗积分饱和的实现
{

if(fabs(pid.err)>200)//蓝色标注为积分分离过程
{
index=0;
}else{
index=1;
if(pid.err<0)
{
  pid.integral+=pid.err;
}
}
}else if(pid.ActualSpeed<pid.umin){
if(fabs(pid.err)>200)//积分分离过程
{
index=0;
}else{
 index=1;
 if(pid.err>0)
 {
pid.integral+=pid.err;
}
}
}else{
if(fabs(pid.err)>200)//积分分离过程
{
index=0;
}else{
index=1;
pid.integral+=pid.err;
}
}

pid.voltage=pid.Kp*pid.err+index*pid.Ki*pid.integral+pid.Kd*(pid.err-pid.err_last);

pid.err_last=pid.err;
pid.ActualSpeed=pid.voltage*1.0;
return pid.ActualSpeed;
}
void PID_init(void){
printf("PID_init begin \n");
pid.SetSpeed=0.0;
pid.ActualSpeed=0.0;
pid.err=0.0;
pid.err_last=0.0;
pid.voltage=0.0;
pid.integral=0.0;
pid.Kp=0.2;
pid.Ki=0.1; //注意，和上几次相比，这里加大了积分环节的值
pid.Kd=0.2;
pid.umax=400;
pid.umin=-200;
printf("PID_init end \n");
}
